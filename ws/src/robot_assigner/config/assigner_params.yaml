# Number of robots in the fleet at startup.
fleet_size: 4

# Team-level parameters.
# Topic where the team's footprint will be published by swarm_control.
team_footprint_topic: "team_footprint"

# 

# If "Move Swarm" button is pressed, commands the whole swarm with this topic
# with actually moving the robots with the spacemouse input
team_command_topic: "team_vel"

# If "Move Swarm Frame" button is pressed, allows to virtually adjust the desired pose of the whole swarm 
# (?, or just the swarm frame) without actually moving the robots with the spacemouse input
team_frame_command_topic: "team_frame_vel"

# Virtual (desired) swarm frame name.
team_tf_frame_name: "team_frame"

# Publishes PoseStamped message for each robot to expand/shrink/load the swarm structure
tf_changer_topic: "tf_changer"

# Robot enable status topic.
robot_enable_status_topic: "robot_enable_status"


# Robot-level parameters.
# Frame topics for each robot. Controlling these controls the TF frame
# and not the physical robot.
robot_frame_command_topic: "robot_frame_vel"

# Command topics for each robot. Controlling these controls the phyiscal robot.
robot_command_topic: "/d/cmd_vel"

# Virtual (desired) robot (control point) frame names.
virtual_robot_frame_name: "tf_robot_"

# Actual robot (control point) frame names.
# Needed to be able to use the syncing desired robot frames function.
real_robot_frame_name: "d_tf_base_link"

# Robot desired state topic name.
# swarm_control.py publishes desired robot states here.
robot_desired_state_topic: "/d/desired_state"

# Name of each robot. Used in the GUI.
robot_name: "D_"

# Robot node names.
robot_node_names:
  - ["/uwb_front_oarbot_silver","/uwb_back_oarbot_silver","/sensor_fusion_oarbot_silver","/oarbot_silver_ctrl"]
  - ["/uwb_front_oarbot_blue","/uwb_back_oarbot_blue","/sensor_fusion_oarbot_blue","/oarbot_blue_ctrl"]
  - []
  - []
  - []
  - []